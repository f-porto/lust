WHITESPACE = _{ " " | "\n" | "\t" | "\r" }

ShortComment = @{ "--" ~ (!NEWLINE ~ ANY)* }
LongComment = @{ "--[" ~ PUSH("="*) ~ "[" ~ (!("]" ~ PEEK ~ "]") ~ ANY)* ~ "]" ~ POP ~ "]" }
COMMENT = _{ LongComment | ShortComment }

// Strings
SqString = ${ "'" ~ SqInner ~ "'" }
SqInner = @{ SqChar* }
SqChar = {
    !("'" | "\\" | NEWLINE) ~ ANY
    | "\\" ~ ANY
}

DqString = ${ "\"" ~ DqInner ~ "\"" }
DqInner = @{ DqChar* }
DqChar = {
    !("\"" | "\\" | NEWLINE) ~ ANY
    | "\\" ~ ANY
}

RawString = ${"[" ~ PUSH("="*) ~ "[" ~ RawInner ~  "]" ~ POP ~ "]" }
RawInner = @{ RawChar* }
RawChar = { !("]" ~ PEEK ~ "]") ~ ANY }

String = _{ RawString | DqString | SqString }

// Number
Integer = @{ ASCII_DIGIT+ }
Float = @{
    ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ (^"e" ~  ("+" | "-")? ~ ASCII_DIGIT+ )?
    | "." ~ ASCII_DIGIT+ ~ (^"e" ~  ("+" | "-")? ~ ASCII_DIGIT+ )?
    | ASCII_DIGIT + ~ ^"e" ~  ("+" | "-")? ~ ASCII_DIGIT+
}

HexInteger = @{ ^"0x" ~ ASCII_HEX_DIGIT+ }
HexFloat = @{
    ^"0x" ~ ASCII_HEX_DIGIT+ ~ "." ~ ASCII_HEX_DIGIT* ~ (^"p" ~  ("+" | "-")? ~ ASCII_HEX_DIGIT+ )?
    | ^"0x" ~ "." ~ ASCII_HEX_DIGIT+ ~ (^"p" ~  ("+" | "-")? ~ ASCII_HEX_DIGIT+ )?
    | ^"0x" ~ ASCII_HEX_DIGIT + ~ ^"p" ~  ("+" | "-")? ~ ASCII_HEX_DIGIT+
}

Number = _{ HexFloat | HexInteger | Float | Integer }

// Literal
True = @{ "true" }
False = @{ "false" }
Nil = @{ "Nil" }
Literal = _{ String | Number | True | False | Nil }

// Keyword
Keyword = @{
    "true" | "false" | "nil"
    | "function" | "local" | "return"
    | "do" | "end"
    | "repeat" | "until" | "while" | "for" | "in" | "break" | "goto"
    | "if" | "elseif" | "else" | "then"
    | "and" | "or" | "not"
}

// Name
Word = @{ ("_" | ASCII_ALPHA) ~ ("_" | ASCII_ALPHANUMERIC)* }
Name = @{ !(Keyword ~ !ASCII_ALPHA) ~ Word }

Chunk = _{ SOI ~ Block ~ EOI }

Block = { Statement* ~ ReturnStatement? }

Statement = {
    Empty
    | Label
    | Break
    | Goto
    | Do
    | While
    | Reapeat
    | If
    | NumericalFor
    | GenericFor
    | FunctionDefinition
    | LocalFunctionDefinition
    | LocalAssignment
    | Assigment
    | FunctionCall
}

Empty = { ";" }
Label = { "::" ~ Name ~ "::" }
Break = { "break" }
Goto = { "goto" ~ Name }
Do = { "do" ~ Block ~ "end" }
While = { "while" ~ Expression ~ "do" ~ Block ~  "end" }
Reapeat = { "repeat" ~ Block ~ "until" ~ Expression }
If = { "if" ~ Expression ~ "then" ~ Block ~ ("elseif" ~ Expression ~ "then" ~ Block)* ~ ("else" ~ Block)? ~ "end" }
NumericalFor = { "for" ~ Name ~ "=" ~ Expression ~ "," ~ Expression ~ ("," ~ Expression)? ~ "do" ~ Block ~ "end" }
GenericFor = { "for" ~ NameList ~ "in" ~ ExpressionList ~ "do" ~ Block ~ "end" }
FunctionDefinition = { "function" ~ FunctionName ~ FunctionBody }
LocalFunctionDefinition = { "local" ~ "function" ~ FunctionName ~ FunctionBody }
LocalAssignment = { "local" ~ AttributeList ~ ("=" ~ ExpressionList)? }
Assigment = { VariableList ~ "=" ~ ExpressionList }

AttributeList = { Name ~ Attribute ~ ("," ~ Name ~ Attribute)* }
Attribute = { ("<" ~ Name ~ ">")? }
ReturnStatement = { "return" ~ ExpressionList? ~ ";"? }
NameList = { Name ~ ("," ~ Name)* }
FunctionName = { Name ~ ("." ~ Name)* ~ (":" ~ Name)? }
VariableList = { PrefixExpression ~ ("," ~ PrefixExpression)* }
// VariableList = { Variable ~ ("," ~ Variable)* }
// Variable = {
//     Name
//     | PrimaryExp ~ ( Selector | CallSuffix )* ~ Selector
// }
FunctionBody = { "(" ~ ParameterList? ~ ")" ~ Block ~ "end" }
ParameterList = {
    NameList ~ ("," ~ "...")?
    | "..."
}
ExpressionList = { Expression ~ ("," ~ Expression)* }

Arguments = {
    "(" ~ ExpressionList? ~ ")"
    | String
    | Table
}
FunctionCall = { PrefixExpression }
// FunctionCall = {
//     PrimaryExp ~ ( Selector | CallSuffix )* ~ Arguments
//     | PrimaryExp ~ ( Selector | CallSuffix )* ~ ":" ~ Name ~ Arguments
// }

// PrefixExpression
PrefixExpression  =  { PrimaryExp ~ ( Selector | CallSuffix )* }
PrimaryExp =  { Name | "(" ~ Expression ~ ")" }
Selector = { "[" ~ Expression ~ "]" | "." ~ Name }
CallSuffix = { Arguments | ":" ~ Name ~ Arguments }

// Expression
Lambda = { "function" ~ FunctionBody }

Table = { "{" ~ FieldList? ~ "}" }
FieldList = { Field ~ (FieldDelimeter ~ Field)* ~ FieldDelimeter? }
Field = {
    "[" ~ Expression ~ "]" ~ "=" ~ Expression
    | Name ~ "=" ~  Expression
    | Expression
}
FieldDelimeter = { "," | ";" }

Primary = { Literal | "..." | Lambda | Table | PrefixExpression }
Atom = { UnaryOperator? ~ Primary }
Expression = { Atom ~ (BinaryOperator ~ Atom)* }

BinaryOperator = _{
    Addition | Subtraction | Multiplication | Division | IntegerDivision | Modulo | Exponentiation |
    BooleanOr | BooleanAnd |
    Equals | Different | Greater | Less | GreaterOrEqual | LessOrEqual |
    BitwiseAnd | BitwiseLeftShift | BitwiseOr | BitwiseRightShift | BitwiseXor |
    Concatenation
}
Addition = { "+" }
Subtraction = { "-" }
Multiplication = { "*" }
Division = { "/" }
IntegerDivision = { "//" }
Modulo = { "%" }
BooleanOr = { "or" }
BooleanAnd = { "and" }
Equals = { "==" }
Different = { "~=" }
Greater = { ">" }
Less = { "<" }
GreaterOrEqual = { ">=" }
LessOrEqual = { "<=" }
BitwiseOr = { "|" }
BitwiseAnd = { "&" }
BitwiseXor = { "~" }
BitwiseLeftShift = { "<<" }
BitwiseRightShift = { ">>" }
Concatenation = { ".." }
Exponentiation = { "^" }

UnaryOperator = _{ Negation | Length | BitwiseNegation | BooleanNegation }
Negation = { "-" }
Length = { "#" }
BitwiseNegation = { "~" }
BooleanNegation = { "not" }
