WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

ShortComment = @{ "--" ~ !("[" ~ "="* ~ "[") ~ (!NEWLINE ~ ANY)* }
LongComment = @{ "--[" ~ PUSH("="*) ~ "[" ~ LongCommentInner ~ "]" ~ POP ~ "]" }
LongCommentInner = @{ LongCommentChar* }
LongCommentChar = _{ !("]" ~ PEEK ~ "]") ~ ANY }
COMMENT = _{ LongComment | ShortComment }

Plus = @{ "+" }
Minus = @{ "-" }
Asterisks = @{ "*" }
Slash = @{ "/" }
Percent = @{ "%" }
Circumflex = @{ "^" }
Hash = @{ "#" }
Ampersand = @{ "&" }
Tilde = @{ "~" }
VerticalBar = @{ "|" }
LeftShift = @{ "<<" }
RightShift = @{ ">>" }
DoubleSlash = @{ "//" }
DoubleEquals = @{ "==" }
Different = @{ "~=" }
LessOrEqual = @{ "<=" }
GreaterOrEqual = @{ ">=" }
Less = @{ "<" }
Greater = @{ ">" }
Equals = @{ "=" }
LeftParenthesis = @{ "(" }
RightParenthesis = @{ ")" }
LeftBrace = @{ "{" }
RightBrace = @{ "}" }
LeftBracket = @{ "[" }
RightBracket = @{ "]" }
DoubleColon = @{ "::" }
Semicolon = @{ ";" }
Colon = @{ ":" }
Comma = @{ "," }
TripleDot = @{ "..." }
DoubleDot = @{ ".." }
Dot = @{ "." }

And = @{ "and" }
Break = @{ "break" }
Do = @{ "do" }
Else = @{ "else" }
Elseif = @{ "elseif" }
End = @{ "end" }
False = @{ "false" }
For = @{ "for" }
Function = @{ "function" }
Goto = @{ "goto" }
If = @{ "if" }
In = @{ "in" }
Local = @{ "local" }
Nil = @{ "nil" }
Not = @{ "not" }
Or = @{ "or" }
Repeat = @{ "repeat" }
Return = @{ "return" }
Then = @{ "then" }
True = @{ "true" }
Until = @{ "until" }
While = @{ "while" }

Alpha = _{ 'a'..'z' | 'A'..'Z' }
Digit = _{ '0'..'9' }
HexDigit = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
HexPrefix = _{ "0" ~ ("x" | "X") }

HexExponent = _{ ("p" | "P") ~ ("-" | "+")? ~ HexDigit+ }
HexFloat1 = _{ "-"? ~ HexPrefix ~ HexDigit* ~ "." ~ HexDigit+ ~ HexExponent? }
HexFloat2 = _{ "-"? ~ HexPrefix ~ HexDigit+ ~ "." ~ HexDigit* ~ HexExponent? }
HexFloat3 = _{"-"? ~ HexPrefix ~ HexDigit+ ~ HexExponent}
HexFloat = @{ HexFloat1 | HexFloat2 | HexFloat3 }

HexInteger = @{ "-"? ~ HexPrefix ~ HexDigit+ }

Exponent = _{ ("e" | "E") ~ ("-" | "+")? ~ Digit+ }
Float1 = _{ "-"? ~ Digit* ~ "." ~ Digit+ ~ Exponent? }
Float2 = _{ "-"? ~ Digit+ ~ "." ~ Digit* ~ Exponent? }
Float3 = _{ "-"? ~ Digit+ ~ Exponent }
Float = @{ Float1 | Float2 | Float3 }

Integer = @{ "-"? ~ Digit+ }

Identifier = @{ ("_" | Alpha) ~ ("_" | Alpha | Digit)* }

SqString = ${"'" ~ SqInner ~ "'"}
SqInner = @{ SqChar* }
SqChar = _{ !("'" | NEWLINE | "\\") ~ ANY | "\\" ~ ANY }

DqString = ${"\"" ~ DqInner ~ "\""}
DqInner = @{ DqChar* }
DqChar = _{ !("\"" | NEWLINE | "\\") ~ ANY | "\\" ~ ANY }

RawString = ${ "[" ~ PUSH("="*) ~ "[" ~ RawInner ~ "]" ~ POP ~ "]" }
RawInner = @{ RawChar* }
RawChar = _{ !("]" ~ PEEK ~ "]") ~ ANY }

//

VarArg = { TripleDot }

Chunk = { Block }

Block = { Statement* ~ ReturnStatement? }

Statement = { Nothing }

Nothing = { Semicolon }
Assignment = { VariableList ~ Equals ~ ExpressionList }
Label = { DoubleColon ~ Identifier ~ DoubleColon }
BreakStatement = { Break }
GotoStatement = { Goto ~ Identifier }
DoBlock = { Do ~ Block ~ End }
WhileLoop = { While ~ Expression ~ Do ~ Block ~ End }
RepeatLoop = {  Repeat ~ Block ~ Until ~ Expression }
IfStatement = { If ~ Expression ~ Then ~ Block ~ (Elseif ~ Expression ~ Then ~ Block)* ~ (Else ~ Block)? ~ End }
NumericalForLoop = { For ~ Identifier ~ Equals ~ Expression ~ Comma ~ Expression ~ (Comma ~ Expression)? ~ Do ~ Block ~ End }
GenericForLoop = { For ~ IdentifierList ~ Equals ~ ExpressionList ~ Do ~ Block ~ End }
FunctionDefinition = { Function ~ FunctionName ~ FunctionBody }
LocalFunctionDefinition = { Local ~ Function ~ Identifier ~ FunctionBody }
LocalAssignment = { Local ~ AttributeList ~ (Equals ~ ExpressionList)? }

AttributeList = { Identifier ~ Attribute ~ (Comma ~ Identifier ~ Attribute)* }
Attribute = { (Less ~ Identifier ~ Greater)? }

ReturnStatement = { Return ~ ExpressionList? ~ Semicolon? }

FunctionName = { Identifier ~ (Dot ~ Identifier)* ~ (Colon ~ Identifier)? }

VariableList = { Variable ~ (Comma ~ Variable)* }
Variable = { Identifier }

IdentifierList = { Identifier ~ (Comma ~ Identifier)* }

ExpressionList = { Expression ~ (Comma ~ Expression)* }

Arguments = { (LeftParenthesis ~ ExpressionList? ~ RightParenthesis) | TableConstructor | String }

FunctionBody = { LeftParenthesis ~ ParameterList? ~ RightParenthesis ~ Block ~ End }

ParameterList = { (IdentifierList ~ (Comma ~ VarArg)?) | TripleDot }

TableConstructor = { LeftBrace ~ FieldList? ~ RightBrace }
FieldList = { Field ~ (FieldDelimiter ~ Field)* ~ FieldDelimiter? }
Field = {
    (LeftBracket ~ Expression ~ RightBracket ~ Equals ~ Expression) |
    (Identifier ~ Equals ~ Expression) |
    Expression
}
FieldDelimiter = { Comma | Semicolon }

PrefixExp = { Variable | (LeftParenthesis ~ Expression ~ RightParenthesis) }

LambdaDefinition = { Function ~ FunctionBody }

BinaryOperation = _{
    Addition | Subtraction | Multiplication | Division | IntegerDivision | Modulo | Exponentiation |
    BooleanOr | BooleanAnd |
    IsEqual | IsDifferent | IsGreater | IsLess | IsGreaterOrEqual | IsLessOrEqual |
    BitwiseAnd | BitwiseLeftShift | BitwiseOr | BitwiseRightShift | BitwiseXor |
    Concatenation
}
Addition = { Plus }
Subtraction = { Minus }
Multiplication = { Asterisks }
Division = { Slash }
IntegerDivision = { DoubleSlash }
Modulo = { Percent }
BooleanOr = { Or }
BooleanAnd = { And }
IsEqual = { DoubleEquals }
IsDifferent = { Different }
IsGreater = { Greater }
IsLess = { Less }
IsGreaterOrEqual = { GreaterOrEqual }
IsLessOrEqual = { LessOrEqual }
BitwiseOr = { VerticalBar }
BitwiseAnd = { Ampersand }
BitwiseXor = { Tilde }
BitwiseLeftShift = { LeftShift }
BitwiseRightShift = { RightShift }
Concatenation = { DoubleDot }
Exponentiation = { Circumflex }

UnaryOperation = _{ Negation | Length | BitwiseNegation | BooleanNegation }
Negation = { Minus }
Length = { Hash }
BitwiseNegation = { Tilde }
BooleanNegation = { Not }

Primary = _{
    Integer | String | Float | Nil | VarArg | TableConstructor | PrefixExp | LambdaDefinition
}

Atom = _{ UnaryOperation? ~ Primary }

Expression = { Atom ~ (BinaryOperation ~ Atom)* }

// Useful for testing
Integers = _{ SOI ~ Integer* ~ EOI }
HexIntegers = _{ SOI ~ HexInteger* ~ EOI }
Floats = _{ SOI ~ Float* ~ EOI }
HexFloats = _{ SOI ~ HexFloat* ~ EOI }
Identifiers = _{ SOI ~ Identifier* ~ EOI }
SqStrings = _{ SOI ~ SqString* ~ EOI }
DqStrings = _{ SOI ~ DqString* ~ EOI }
RawStrings = _{ SOI ~ RawString* ~ EOI }

Number = _{ HexFloat | Float | HexInteger | Integer }
String = _{ RawString | SqString | DqString }
Symbol = _{ Plus | Minus | Asterisks | Slash | Percent | Circumflex | Hash | Ampersand | Tilde | VerticalBar | LeftShift | RightShift | DoubleSlash | DoubleEquals | Different | LessOrEqual | GreaterOrEqual | Less | Greater | Equals | LeftParenthesis | RightParenthesis | LeftBrace | RightBrace | LeftBracket | RightBracket | DoubleColon | Semicolon | Colon | Comma | TripleDot | DoubleDot | Dot }
Keyword = _{ And | Break | Do | Else | Elseif | End | False | For | Function | Goto | If | In | Local | Nil | Not | Or | Repeat | Return | Then | True | Until | While }
Comment = _{ LongComment | ShortComment }
All = _{ SOI ~ (Comment | Number | String | Symbol | Keyword | Identifier)* ~ EOI }